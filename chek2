<!DOCTYPE html>
<html lang="th">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>แอปติดตามระดับน้ำตาลสำหรับผู้ป่วยเบาหวาน</title>
    <!-- Tailwind CSS CDN for styling -->
    <script src="https://cdn.tailwindcss.com"></script>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #f3f4f6;
        }
        .container {
            max-width: 900px;
        }
        .card {
            background-color: #ffffff;
            border-radius: 1rem;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            padding: 2rem;
        }
        .section-title {
            font-size: 1.5rem;
            font-weight: 700;
            color: #1f2937;
            margin-bottom: 1.5rem;
        }
        .accordion-header {
            cursor: pointer;
            padding: 1rem;
            background-color: #f9fafb;
            border-radius: 0.5rem;
            transition: background-color 0.2s ease-in-out;
        }
        .accordion-header:hover {
            background-color: #e5e7eb;
        }
        .accordion-content {
            max-height: 0;
            overflow: hidden;
            transition: max-height 0.3s ease-in-out;
        }
        .accordion-content.open {
            max-height: 500px; /* Adjust as needed */
        }
        .modal {
            display: none;
            position: fixed;
            z-index: 100;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            overflow: auto;
            background-color: rgba(0,0,0,0.4);
            justify-content: center;
            align-items: center;
        }
    </style>
</head>
<body class="bg-gray-100 flex items-center justify-center min-h-screen p-4">

    <div class="container mx-auto space-y-8">
        <!-- Main Application Card -->
        <div class="card">
            <h1 class="text-3xl font-bold text-center text-indigo-700 mb-6">แอปติดตามระดับน้ำตาล</h1>
            <p id="user-id-display" class="text-center text-sm text-gray-500 mb-4"></p>

            <!-- Input Form Section -->
            <div id="input-section">
                <p class="section-title">บันทึกระดับน้ำตาล</p>
                <form id="sugar-level-form" class="space-y-4">
                    <div>
                        <label for="sugar_level" class="block text-sm font-medium text-gray-700">ระดับน้ำตาล (mg/dL)</label>
                        <input type="number" id="sugar_level" name="sugar_level" required class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 p-2">
                    </div>
                    <div>
                        <label for="record_date" class="block text-sm font-medium text-gray-700">วันที่</label>
                        <input type="date" id="record_date" name="record_date" required class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 p-2">
                    </div>
                    <div>
                        <label for="record_time" class="block text-sm font-medium text-gray-700">เวลา</label>
                        <input type="time" id="record_time" name="record_time" required class="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-500 focus:ring-indigo-500 p-2">
                    </div>
                    <button type="submit" class="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 transition-colors">
                        บันทึก
                    </button>
                </form>
                <div id="message-box" class="mt-4 hidden p-3 rounded-md text-sm font-medium text-white text-center"></div>
            </div>
        </div>

        <!-- Weekly Chart Section -->
        <div class="card">
            <p class="section-title">กราฟระดับน้ำตาลรายสัปดาห์</p>
            <canvas id="sugarChart"></canvas>
        </div>

        <!-- History Section -->
        <div class="card">
            <p class="section-title">ประวัติการบันทึก</p>
            <div id="history-container" class="overflow-x-auto">
                <table class="min-w-full divide-y divide-gray-200">
                    <thead class="bg-gray-50">
                        <tr>
                            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                วันที่
                            </th>
                            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                เวลา
                            </th>
                            <th scope="col" class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                                ระดับน้ำตาล (mg/dL)
                            </th>
                            <th scope="col" class="relative px-6 py-3">
                                <span class="sr-only">ลบ</span>
                            </th>
                        </tr>
                    </thead>
                    <tbody id="history-table-body" class="bg-white divide-y divide-gray-200">
                        <tr>
                            <td colspan="4" class="px-6 py-4 whitespace-nowrap text-center text-sm text-gray-500">
                                ไม่มีข้อมูลบันทึก
                            </td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>

        <!-- Advice Section -->
        <div class="card">
            <div class="accordion-header flex justify-between items-center" onclick="toggleAccordion('advice-content')">
                <p class="section-title mb-0">คำแนะนำการดูแลสุขภาพ</p>
                <svg id="advice-icon" class="w-6 h-6 text-gray-600 transform transition-transform duration-300" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path></svg>
            </div>
            <div id="advice-content" class="accordion-content p-4 text-gray-600 space-y-2">
                <p><strong>การควบคุมอาหาร:</strong> ทานอาหารที่มีใยอาหารสูง เช่น ผัก ผลไม้ ธัญพืชไม่ขัดสี และลดอาหารที่มีน้ำตาลและไขมันสูง</p>
                <p><strong>การออกกำลังกาย:</strong> ควรออกกำลังกายสม่ำเสมออย่างน้อย 150 นาทีต่อสัปดาห์ เช่น การเดินเร็ว ว่ายน้ำ หรือปั่นจักรยาน</p>
                <p><strong>การตรวจระดับน้ำตาล:</strong> หมั่นตรวจระดับน้ำตาลในเลือดตามที่แพทย์แนะนำ เพื่อตรวจสอบประสิทธิภาพของการรักษา</p>
                <p><strong>การใช้ยา:</strong> ใช้ยาและ/หรือฉีดอินซูลินตามที่แพทย์สั่งอย่างเคร่งครัด ไม่ควรปรับเปลี่ยนขนาดของยาเอง</p>
                <p><strong>การจัดการความเครียด:</strong> ความเครียดส่งผลต่อระดับน้ำตาลได้ ควรหาทางผ่อนคลาย เช่น การทำสมาธิ โยคะ หรือการฟังเพลง</p>
            </div>
        </div>
    </div>
    
    <!-- Custom Modal for Confirmation -->
    <div id="confirm-modal" class="modal">
        <div class="bg-white rounded-lg shadow-xl p-6 w-96 mx-auto">
            <p class="text-lg font-bold mb-4">ยืนยันการลบ</p>
            <p class="text-sm text-gray-600 mb-6">คุณแน่ใจหรือไม่ว่าต้องการลบรายการนี้?</p>
            <div class="flex justify-end space-x-4">
                <button id="cancel-delete" class="px-4 py-2 rounded-md border border-gray-300 text-gray-700 hover:bg-gray-100">ยกเลิก</button>
                <button id="confirm-delete" class="px-4 py-2 rounded-md bg-red-600 text-white hover:bg-red-700">ลบ</button>
            </div>
        </div>
    </div>

    <!-- Firebase and Chart.js CDN -->
    <script type="module">
        import { initializeApp } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-app.js";
        import { getAuth, signInAnonymously, signInWithCustomToken } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-auth.js";
        import { getFirestore, collection, addDoc, onSnapshot, query, orderBy, serverTimestamp, doc, deleteDoc } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";
    </script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

    <script type="module">
        // Global variables provided by the canvas environment
        const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';
        const firebaseConfig = JSON.parse(typeof __firebase_config !== 'undefined' ? __firebase_config : '{}');
        const initialAuthToken = typeof __initial_auth_token !== 'undefined' ? __initial_auth_token : null;

        // --- Firebase Initialization and Auth ---
        let app;
        let db;
        let auth;
        let userId = null;
        let readingsRef = null;

        const initFirebase = async () => {
            try {
                if (Object.keys(firebaseConfig).length > 0) {
                    app = initializeApp(firebaseConfig);
                    db = getFirestore(app);
                    auth = getAuth(app);

                    if (initialAuthToken) {
                        await signInWithCustomToken(auth, initialAuthToken);
                    } else {
                        await signInAnonymously(auth);
                    }
                    userId = auth.currentUser.uid;
                    document.getElementById('user-id-display').textContent = `User ID: ${userId}`;
                    readingsRef = collection(db, 'artifacts', appId, 'users', userId, 'blood_sugar_readings');
                    listenForReadings();
                } else {
                    console.error("Firebase config is missing.");
                    document.getElementById('user-id-display').textContent = 'Firebase is not configured. Data will not be saved.';
                }
            } catch (error) {
                console.error("Firebase initialization failed:", error);
                document.getElementById('user-id-display').textContent = 'Firebase initialization failed.';
            }
        };

        // --- Data Handling (Firestore) ---
        const form = document.getElementById('sugar-level-form');
        const messageBox = document.getElementById('message-box');
        const historyTableBody = document.getElementById('history-table-body');
        const ctx = document.getElementById('sugarChart').getContext('2d');
        let chart = null;

        form.addEventListener('submit', async (e) => {
            e.preventDefault();
            const sugarLevel = parseFloat(document.getElementById('sugar_level').value);
            const recordDate = document.getElementById('record_date').value;
            const recordTime = document.getElementById('record_time').value;

            if (isNaN(sugarLevel) || !recordDate || !recordTime) {
                showMessage('โปรดกรอกข้อมูลให้ครบถ้วนและถูกต้อง', 'bg-red-500');
                return;
            }

            try {
                await addDoc(readingsRef, {
                    sugar_level: sugarLevel,
                    record_datetime: new Date(`${recordDate}T${recordTime}`),
                    timestamp: serverTimestamp()
                });
                form.reset();
                showMessage('บันทึกข้อมูลสำเร็จ!', 'bg-green-500');
            } catch (error) {
                console.error("Error adding document: ", error);
                showMessage('เกิดข้อผิดพลาดในการบันทึกข้อมูล: การบันทึกอาจถูกปฏิเสธ', 'bg-red-500');
            }
        });

        const listenForReadings = () => {
            const q = query(readingsRef);
            onSnapshot(q, (querySnapshot) => {
                const readings = [];
                querySnapshot.forEach((doc) => {
                    readings.push({ id: doc.id, ...doc.data() });
                });

                // Sort readings by date and time in descending order
                readings.sort((a, b) => b.record_datetime.toDate() - a.record_datetime.toDate());
                renderHistory(readings);
                renderChart(readings);
            }, (error) => {
                console.error("Error listening for readings: ", error);
                showMessage('เกิดข้อผิดพลาดในการดึงข้อมูลประวัติ', 'bg-red-500');
            });
        };

        const deleteReading = async (docId) => {
            try {
                const docRef = doc(readingsRef, docId);
                await deleteDoc(docRef);
                showMessage('ลบข้อมูลสำเร็จ!', 'bg-green-500');
            } catch (error) {
                console.error("Error deleting document: ", error);
                showMessage('เกิดข้อผิดพลาดในการลบข้อมูล', 'bg-red-500');
            }
            hideConfirmModal();
        };

        // --- UI Rendering ---
        const renderHistory = (readings) => {
            historyTableBody.innerHTML = '';
            if (readings.length === 0) {
                const row = `<tr><td colspan="4" class="px-6 py-4 whitespace-nowrap text-center text-sm text-gray-500">ไม่มีข้อมูลบันทึก</td></tr>`;
                historyTableBody.innerHTML = row;
                return;
            }
            readings.forEach(reading => {
                const date = reading.record_datetime.toDate();
                const formattedDate = date.toLocaleDateString('th-TH');
                const formattedTime = date.toLocaleTimeString('th-TH', { hour: '2-digit', minute: '2-digit' });

                const row = `
                    <tr class="hover:bg-gray-50">
                        <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">${formattedDate}</td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${formattedTime}</td>
                        <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">${reading.sugar_level}</td>
                        <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                            <button onclick="showConfirmModal('${reading.id}')" class="text-red-600 hover:text-red-900">ลบ</button>
                        </td>
                    </tr>
                `;
                historyTableBody.innerHTML += row;
            });
        };

        const renderChart = (readings) => {
            const sevenDaysAgo = new Date();
            sevenDaysAgo.setDate(sevenDaysAgo.getDate() - 7);

            // Filter for the last 7 days
            const recentReadings = readings.filter(r => r.record_datetime.toDate() > sevenDaysAgo);

            // Sort readings chronologically for the chart
            recentReadings.sort((a, b) => a.record_datetime.toDate() - b.record_datetime.toDate());

            const labels = recentReadings.map(r => r.record_datetime.toDate().toLocaleDateString('th-TH', { day: '2-digit', month: 'short' }));
            const data = recentReadings.map(r => r.sugar_level);

            if (chart) {
                chart.destroy();
            }

            chart = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: labels,
                    datasets: [{
                        label: 'ระดับน้ำตาล (mg/dL)',
                        data: data,
                        borderColor: 'rgb(79, 70, 229)',
                        backgroundColor: 'rgba(79, 70, 229, 0.2)',
                        tension: 0.1,
                        fill: true
                    }]
                },
                options: {
                    responsive: true,
                    scales: {
                        y: {
                            beginAtZero: false,
                            title: {
                                display: true,
                                text: 'ระดับน้ำตาล (mg/dL)'
                            }
                        },
                        x: {
                            title: {
                                display: true,
                                text: 'วันที่'
                            }
                        }
                    },
                    plugins: {
                        tooltip: {
                            callbacks: {
                                label: function(context) {
                                    let label = context.dataset.label || '';
                                    if (label) {
                                        label += ': ';
                                    }
                                    if (context.parsed.y !== null) {
                                        label += context.parsed.y + ' mg/dL';
                                    }
                                    return label;
                                }
                            }
                        }
                    }
                }
            });
        };

        const showMessage = (message, colorClass) => {
            messageBox.textContent = message;
            messageBox.className = `mt-4 p-3 rounded-md text-sm font-medium text-white text-center ${colorClass}`;
            messageBox.style.display = 'block';
            setTimeout(() => {
                messageBox.style.display = 'none';
            }, 3000);
        };
        
        // --- Accordion for Advice Section ---
        window.toggleAccordion = (id) => {
            const content = document.getElementById(id);
            const icon = document.getElementById('advice-icon');
            if (content.classList.contains('open')) {
                content.classList.remove('open');
                icon.style.transform = 'rotate(0deg)';
            } else {
                content.classList.add('open');
                icon.style.transform = 'rotate(180deg)';
            }
        };

        // --- Custom Modal Functions ---
        const modal = document.getElementById('confirm-modal');
        const confirmDeleteBtn = document.getElementById('confirm-delete');
        const cancelDeleteBtn = document.getElementById('cancel-delete');
        
        let docIdToDelete = null;

        const showConfirmModal = (docId) => {
            docIdToDelete = docId;
            modal.style.display = 'flex';
        };

        const hideConfirmModal = () => {
            modal.style.display = 'none';
            docIdToDelete = null;
        };

        confirmDeleteBtn.addEventListener('click', () => {
            if (docIdToDelete) {
                deleteReading(docIdToDelete);
            }
        });

        cancelDeleteBtn.addEventListener('click', hideConfirmModal);
        
        // Make functions accessible globally for inline event handlers
        window.showConfirmModal = showConfirmModal;
        
        // Initialize the app
        initFirebase();
    </script>
</body>
</html>
